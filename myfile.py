# -- coding: utf-8 --
"""myfile

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15e-V4gddIhN9kVunjOiHNkcsxjzHTuap
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from streamlit_option_menu import option_menu

# Configuraci칩n de la p치gina de Streamlit
st.set_page_config(page_title="Deforestaci칩n en 츼reas Naturales Protegidas", page_icon="游꺕", initial_sidebar_state="expanded", layout='wide')

# Cargar datos
archivo = "Dataset_DeforestacionAnp_SERNANP.csv"
data = pd.read_csv(archivo)

# Configuraci칩n del men칰
with st.sidebar:
    menu = option_menu(
        menu_title="Men칰 Principal",
        options=["Inicio", "Deforestaci칩n por a침o", "Causas de Deforestaci칩n", "Comparativo", "Zonificaci칩n", "츼rea Deforestada por ANP", "Data"],
        icons=["house", "bar-chart", "chart-pie", "line-chart", "map", "globe", "table"],
        menu_icon="menu-app",
        default_index=0
    )

# Secci칩n: Inicio
if menu == "Inicio":
    st.title('Huellas de la deforestaci칩n')
    st.header("Rastreando el impacto de la p칠rdida forestal en Per칰 a trav칠s del tiempo")
    st.image("https://raw.githubusercontent.com/mcamilaa/streamlit_app/main/imagenes/defo_1.jpg", caption="Deforestaci칩n en 치reas protegidas", use_column_width=True)
    st.write('La deforestaci칩n en Per칰 es un fen칩meno alarmante que ha capturado la atenci칩n de ambientalistas, cient칤ficos y gobiernos por igual. Este pa칤s, hogar de una de las partes m치s ricas en biodiversidad del planeta, enfrenta una creciente amenaza debido a la tala indiscriminada de bosques, impulsada por actividades como la miner칤a y la expansi칩n urbana. En este caso, analizaremos un registro de monitoreo de la Deforestaci칩n en el 치mbito de las 츼reas Naturales, para dar conocimiento especificos sobre ello y generar un an치lisis.')
    st.write("El Registro de Monitoreo de la Deforestaci칩n en el 치mbito de las 츼reas Naturales Protegidas es una herramienta fundamental gestionada por el Servicio Nacional de 츼reas Naturales Protegidas por el Estado (SERNANP) en Per칰. Este organismo, adscrito al Ministerio del Ambiente, tiene como misi칩n asegurar la conservaci칩n de las 치reas protegidas del pa칤s, as칤 como la diversidad biol칩gica y el mantenimiento de sus servicios ambientales. A trav칠s de sistemas de informaci칩n geogr치fica y t칠cnicas de monitoreo biol칩gico, SERNANP recopila y analiza datos sobre la deforestaci칩n y otros cambios en el uso del suelo dentro de estas 치reas. Este registro no solo permite identificar las tendencias de p칠rdida de cobertura forestal, sino que tambi칠n facilita la implementaci칩n de estrategias de conservaci칩n y gesti칩n sostenible, contribuyendo as칤 a la protecci칩n de los ecosistemas y a la mitigaci칩n de los efectos del cambio clim치tico. La informaci칩n obtenida es crucial para la toma de decisiones informadas y para el foralecimiento de las pol칤ticas ambientales en el pa칤s.")
    st.write("De tal forma, nos enfocaremos en el monitoreo de la deforestaci칩n dentro de las 츼reas Naturales Protegidas. Examinaremos datos generales que ilustran la tasa de deforestaci칩n y las tendencias a lo largo del tiempo, as칤 como las implicancias de estas p칠rdidas en la conservaci칩n de la biodiversidad.")

# Secci칩n: Deforestaci칩n por a침o
if menu == "Deforestaci칩n por a침o":
    def anio_deforestation():
        st.header("츼rea deforestada por a침o")
        
        # Crear un filtro para seleccionar el a침o
        years = [2021, 2022, 2023]
        selected_year = st.selectbox("Selecciona el a침o para mostrar el gr치fico:", years)
        
        # Funci칩n para procesar y filtrar datos por a침o
        def procesar_datos_por_anio(data, anio):
            meses = {1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril', 5: 'Mayo', 6: 'Junio',
                     7: 'Julio', 8: 'Agosto', 9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'}
            datos_anio = data[data['ANIO_REPORTE'] == anio]
            area_por_mes = datos_anio.groupby('MES_IMAG')['AREA_DEFO'].sum().reset_index()
            area_por_mes['MES_NOMBRE'] = area_por_mes['MES_IMAG'].map(meses)
            return area_por_mes, datos_anio
    
        # Procesar datos
        data_anio, datos_filtrados = procesar_datos_por_anio(data, selected_year)
    
        # Colores para cada a침o
        color_map = {2021: 'orange', 2022: 'green', 2023: 'blue'}
        selected_color = color_map[selected_year]
    
        # Crear gr치fico con Plotly
        fig = px.line(data_anio, x='MES_NOMBRE', y='AREA_DEFO', title=f'츼rea deforestada por mes en {selected_year}')
        fig.update_traces(
            mode='lines+markers',
            marker=dict(symbol='circle', size=8, color=selected_color),
            line=dict(color=selected_color, width=2)
        )
        fig.update_layout(
            title=dict(
                text=f'츼rea deforestada por mes en {selected_year}',
                font=dict(size=20, color='darkblue')
            ),
            xaxis=dict(
                title='Mes',
                titlefont=dict(size=16, color='darkblue'),
                tickfont=dict(size=14, color='black'),
                showgrid=True,
                gridcolor='lightgrey'
            ),
            yaxis=dict(
                title='츼rea Deforestada (ha)',
                titlefont=dict(size=16, color='darkblue'),
                tickfont=dict(size=14, color='black'),
                showgrid=True,
                gridcolor='lightgrey'
            ),
            plot_bgcolor='white',
            paper_bgcolor='white',
            hovermode='x unified'
        )
    
        # Mostrar gr치fico en Streamlit
        st.plotly_chart(fig)
        
        # Mostrar tabla de datos filtrados
        datos_filtrados.index = datos_filtrados.index + 1
        st.write(datos_filtrados[['MES_IMAG', 'ANIO_REPORTE', 'AREA_DEFO']])
        st.markdown("*La tabla muestra los datos de deforestaci칩n mensuales para el a침o seleccionado.*")
        st.info("Este gr치fico ilustra la cantidad de 치rea deforestada (en hect치reas) por mes en el a침o seleccionado.")


# Secci칩n: Causas de Deforestaci칩n (Gr치fico Interactivo)
if menu == "Causas de Deforestaci칩n":
    st.header("Causas de la Deforestaci칩n")
    
    # Agrupaci칩n de datos por causa
    area_causa = data.groupby('DEFO_CAUSA')['AREA_DEFO'].sum().reset_index()
    area_causa = area_causa.sort_values('AREA_DEFO', ascending=False)  # Ordenar por 치rea

    # Crear gr치fico de pastel interactivo con Plotly
    fig = px.pie(
        area_causa,
        values='AREA_DEFO',
        names='DEFO_CAUSA',
        title='Distribuci칩n de las Causas de la Deforestaci칩n',
        color_discrete_sequence=px.colors.qualitative.Set3,
        hole=0.4  # Gr치fico de dona (opcional, puedes ajustarlo o eliminar esta l칤nea)
    )
    fig.update_traces(textinfo='percent+label')  # Mostrar porcentaje y etiquetas

    # Configuraci칩n del dise침o
    fig.update_layout(
        title=dict(
            text='Distribuci칩n de las Causas de la Deforestaci칩n',
            font=dict(size=20, color='darkblue')
        ),
        legend=dict(
            title='Causas',
            font=dict(size=14),
            bordercolor='lightgrey',
            borderwidth=1
        )
    )

    # Mostrar el gr치fico interactivo en Streamlit
    st.plotly_chart(fig)

    # Tabla de datos
    st.write("Datos de causa de deforestaci칩n y 치rea deforestada:")
    st.dataframe(area_causa)

        

# Secci칩n: Comparativo
if menu == "Comparativo":
    st.header("Comparaci칩n entre A침os")
    promedios = pd.DataFrame({
        "A침o": ["2021", "2022", "2023"],
        "Promedio Mensual (ha)": [
            data[data['ANIO_REPORTE'] == 2021]['AREA_DEFO'].mean(),
            data[data['ANIO_REPORTE'] == 2022]['AREA_DEFO'].mean(),
            data[data['ANIO_REPORTE'] == 2023]['AREA_DEFO'].mean()
        ]
    })

    fig, ax = plt.subplots()
    ax.bar(promedios['A침o'], promedios['Promedio Mensual (ha)'], color=['orange', 'green', 'blue'])
    ax.set_title('Promedio mensual de 치rea deforestada (2021-2023)')
    ax.set_xlabel('A침o')
    ax.set_ylabel('츼rea Deforestada (ha)')
    st.pyplot(fig)
    st.write(promedios)

# Secci칩n: Zonificaci칩n
if menu == "Zonificaci칩n":
    st.header("Zonificaci칩n de Deforestaci칩n")
    area_zonificacion = data.groupby("ZONIFI_ANP")['AREA_DEFO'].sum().reset_index()
    area_zonificacion = area_zonificacion.sort_values('AREA_DEFO', ascending=True)
    
    fig, ax = plt.subplots()
    ax.barh(area_zonificacion['ZONIFI_ANP'], area_zonificacion['AREA_DEFO'], color='teal')
    ax.set_title('츼rea deforestada por zonificaci칩n')
    ax.set_xlabel('츼rea Deforestada (ha)')
    st.pyplot(fig)
    st.dataframe(area_zonificacion.rename(columns={
        'ZONIFI_ANP': 'Zonificaci칩n',
        'AREA_DEFO': '츼rea Deforestada (ha)'
    }))

# Secci칩n: 츼rea Deforestada por Categor칤a de ANP
if menu == "츼rea Deforestada por ANP":
    st.header("츼rea Deforestada por Categor칤a de ANP (2021-2023)")
    
    # Filtrar datos para el periodo 2021-2023
    filtered_data = data[(data["ANIO_REPORTE"] >= 2021) & (data["ANIO_REPORTE"] <= 2023)].copy()

    # Limpieza de la columna "CATEGORIA" (quitar espacios y uniformar formato)
    filtered_data["CATEGORIA"] = filtered_data["CATEGORIA"].str.strip().str.title()

    # Verificar si hay datos despu칠s del filtrado
    if filtered_data.empty:
        st.warning("No se encontraron datos para el per칤odo 2021-2023.")
    else:
        # Agrupar datos por categor칤a y ANP, sumando el 치rea deforestada
        sum_area_deforestation = filtered_data.groupby(["CATEGORIA", "ANP"])["AREA_DEFO"].sum().reset_index()

        # Obtener las categor칤as 칰nicas
        categorias = sum_area_deforestation["CATEGORIA"].unique()

        # Combo box para seleccionar la categor칤a
        categoria_seleccionada = st.selectbox("Selecciona una categor칤a", categorias)

        # Filtrar datos por la categor칤a seleccionada
        categoria_data = sum_area_deforestation[sum_area_deforestation["CATEGORIA"] == categoria_seleccionada]

        # Verificar si hay datos para la categor칤a seleccionada
        if categoria_data.empty:
            st.warning(f"No hay datos para la categor칤a: {categoria_seleccionada}")
        else:
            # Crear gr치fico de dispersi칩n
            fig = px.scatter(
                categoria_data,
                x="ANP",
                y="AREA_DEFO",
                size="AREA_DEFO",
                color="ANP",
                hover_name="ANP",
                title=f"츼rea Deforestada (ha) en {categoria_seleccionada} (2021-2023)",
                labels={"ANP": "츼rea Natural Protegida", "AREA_DEFO": "츼rea Deforestada (ha)"},
                size_max=60,
                color_discrete_sequence=px.colors.qualitative.Set3
            )

            # Mostrar gr치fico en Streamlit
            st.plotly_chart(fig)

        # Mostrar informaci칩n adicional
        st.markdown(f"*Mostrando datos para la categor칤a: {categoria_seleccionada}.*")


# Secci칩n: Data (al final)
if menu == "C칩mo puedes ayudar a frenar la deforestaci칩n":
    st.header("Vista completa de los datos")
    st.write("Tabla con todos los datos del registro:")
    st.dataframe(data)
